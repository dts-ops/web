*,
*::after,
*::before {
    box-sizing: border-box;
}

:root {
    font-size: 18px;
}

@font-face {
    font-family: myFont;
    src: url(Pacifico-Regular.ttf);
}

html,
body,
main {
    height: 100%;
    width: 100%;
    position: relative;
    overflow: hidden;
}

body {
    margin: 0;
    --color-text: #d05400;
    --color-bg: #0c0c0c;
    --color-link: #6b5537;
    --color-link-hover: #fff;
    --color-content-title-sub: #6b5537;
    color: var(--color-text);
    background-color: var(--color-bg);
    --cursor-stroke: #6b5537;
    --cursor-fill: none;
    --cursor-stroke-width: 1px;
    font-family: Consolas, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.container {
    background: white;
    background-color: #3e3d3d91;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    text-align: center;
    position: relative;
}

select {
    padding: 8px;
    font-size: 16px;
    margin: 10px 0;
}

button {
    padding: 10px 15px;
    font-size: 16px;
    background: #007bff;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 5px;
}

button:hover {
    background: #0056b3;
}

.demo-2 {
    --color-text: #000000;
    --color-bg: #832f05;
    --color-link: #ffffff;
    --color-link-hover: #000;
    --color-content-title-sub: #ec9e34;
    --cursor-stroke: #000000;
    --cursor-fill: none;
    --cursor-stroke-width: 1px;
}

.demo-3 {
    --color-text: #239c34;
    --color-bg: #000000;
    --color-link: #ffffff;
    --color-link-hover: #ccc;
    --color-content-title-sub: #ffffff;
    --cursor-stroke: #239c34;
    --cursor-fill: none;
    --cursor-stroke-width: 3px;
}

a {
    text-decoration: underline;
    color: var(--color-link);
    outline: none;
}

a:hover,
a:focus {
    text-decoration: none;
    color: var(--color-link-hover);
    outline: none;
}

/* Page Loader */
.js .loading::before,
.js .loading::after {
    content: '';
    position: fixed;
    z-index: 1000;
}

.js .loading::before {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--color-bg);
}

.js .loading::after {
    top: 50%;
    left: 50%;
    width: 60px;
    height: 60px;
    margin: -30px 0 0 -30px;
    border-radius: 50%;
    opacity: 0.4;
    background: var(--color-link);
    animation: loaderAnim 0.7s linear infinite alternate forwards;

}

@keyframes loaderAnim {
    to {
        opacity: 1;
        transform: scale3d(0.5, 0.5, 1);
    }
}

.message {
    position: relative;
    z-index: 100;
    text-align: center;
    background: var(--color-text);
    color: var(--color-bg);
    padding: 1rem;
    font-size: 0.85rem;
    position: relative;
}

.no-select {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.frame {
    padding: 3rem 5vw;
    text-align: center;
    position: relative;
    z-index: 1000;
}

.frame__title {
    font-size: 1rem;
    margin: 0 0 1rem;
    font-weight: normal;
}

.frame__links {
    display: inline;
}

.frame__links a:not(:last-child),
.frame__demos a:not(:last-child) {
    margin-right: 1rem;
}

.frame__demos {
    margin: 1rem 0;
}

.frame__demo--current,
.frame__demo--current:hover {
    color: var(--color-text);
    text-decoration: none;
}

.content {
    display: flex;
    flex-direction: column;
    width: 100vw;
    height: calc(100vh - 13rem);
    position: relative;
    align-items: center;
    justify-content: center;
    max-height: 300px;
}

.grid {
    pointer-events: none;
    position: absolute;
    width: 110%;
    height: 110%;
    top: -5%;
    left: -5%;
    display: grid;
    grid-template-columns: repeat(50, 2%);
    grid-template-rows: repeat(50, 2%);
}

.grid__item {
    position: relative;
    opacity: 0.4,
}

.grid--img .grid__item {
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    will-change: transform;
}

.grid__item-img {
    position: absolute;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: 50% 50%;
    z-index: 100;
}

.grid--img .grid__item-img {
    flex: none;
    width: calc(100% + 100px);
    height: calc(100% + 100px);
    will-change: transform;
}

/* Shorthand grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end */

.pos-1 {
    grid-area: 9 / 1 / 25 / 9;
}

.pos-2 {
    grid-area:11 / 19 / 22 / 28;
}

.pos-3 {
    grid-area: 5 / 37 / 20 / 43;
}

.pos-4 {
    grid-area: 13 / 11 / 32 / 18;
}

.pos-5 {
    grid-area: 21 / 30 / 36 / 37;
}

.pos-6 {
    grid-area: 12 / 45 / 28 / 54;
}

.pos-7 {
    grid-area: 28 / 1 / 51 / 9;
}

.pos-8 {
    grid-area: 36 / 14 / 50 / 23;
}

.pos-9 {
    grid-area: 40 / 26 / 52 / 35;
}

.pos-10 {
    grid-area: 37 / 39 / 50 / 49;
}

.content__title {
    font-family: myFont;
    font-weight: 400;
    font-size: 10vw;
    margin: 10px 0;
    line-height: 1;
    position: relative;
}

.content__title-sub {
    color: var(--color-content-title-sub);
    font-size: 4vw;
    display: block;
    margin-left: 3vw;
    line-height: 0.5;
}

.cursor {
    display: none;
}

@media screen and (min-width: 53em) {
    .message {
        display: none;
    }

    .frame {
        position: fixed;
        text-align: left;
        z-index: 100;
        top: 0;
        left: 0;
        display: grid;
        align-content: space-between;
        width: 100%;
        max-width: none;
        height: 100%;
        padding: 3rem;
        pointer-events: none;
        grid-template-columns: 75% 25%;
        grid-template-rows: auto auto auto;
        grid-template-areas: 'title links'
            '... ...'
            '... demos';
    }

    .frame__title-wrap {
        grid-area: title;
        display: flex;
    }

    .frame__title {
        margin: 0;
    }

    .frame__tagline {
        position: relative;
        margin: 0 0 0 1rem;
        padding: 0 0 0 1rem;
        opacity: 0.5;
    }

    .frame__demos {
        margin: 0;
        grid-area: demos;
        justify-self: end;
    }

    .frame__links {
        grid-area: links;
        padding: 0;
        justify-self: end;
    }

    .frame a {
        pointer-events: auto;
    }

    .content {
        height: 100%;
        justify-content: center;
        max-height: none;
    }
}

.grid__item-img:hover {
    opacity: 1 !important;

}

@media (any-pointer: fine) {
    .cursor {
        position: fixed;
        top: 0;
        left: 0;
        display: block;
        pointer-events: none;
    }

    .cursor__inner {
        fill: var(--cursor-fill);
        stroke: var(--cursor-stroke);
        stroke-width: var(--cursor-stroke-width);
    }
}

/* Đây là css cho sparkle button */
*,
*:after,
*:before {
    box-sizing: border-box;
}

:root {
    --transition: 0.25s;
    --spark: 1.8s;
}

.but {
    --cut: 0.1em;
    --active: 0;
    --bg:
        radial-gradient(40% 50% at center 100%,
            hsl(270 calc(var(--active) * 97%) 72% / var(--active)),
            transparent),
        radial-gradient(80% 100% at center 120%,
            hsl(260 calc(var(--active) * 97%) 70% / var(--active)),
            transparent),
        hsl(260 calc(var(--active) * 97%) calc((var(--active) * 44%) + 12%));
    background: var(--bg);
    font-size: 1rem;
    font-weight: 500;
    border: 0;
    cursor: pointer;
    padding: 0.65em 3em;
    display: flex;
    align-items: center;
    width: 100%;
    gap: 0.25em;
    white-space: nowrap;
    border-radius: 100px;
    position: relative;
    justify-content: center;
    box-shadow:
        0 0 calc(var(--active) * 6em) calc(var(--active) * 3em) hsl(260 97% 61% / 0.75),
        0 0.05em 0 0 hsl(260 calc(var(--active) * 97%) calc((var(--active) * 50%) + 30%)) inset,
        0 -0.05em 0 0 hsl(260 calc(var(--active) * 97%) calc(var(--active) * 60%)) inset;
    transition: box-shadow var(--transition), scale var(--transition), background var(--transition);
    scale: calc(1 + (var(--active) * 0.1));
}

button:active {
    scale: 1;
}

svg {
    overflow: visible !important;
}

.sparkle path {
    color: hsl(0 0% calc((var(--active, 0) * 70%) + var(--base)));
    transform-box: fill-box;
    transform-origin: center;
    fill: currentColor;
    stroke: currentColor;
    animation-delay: calc((var(--transition) * 1.5) + (var(--delay) * 1s));
    animation-duration: 0.6s;
    transition: color var(--transition);
}

button:is(:hover, :focus-visible) path {
    animation-name: bounce;
}

@keyframes bounce {

    35%,
    65% {
        scale: var(--scale);
    }
}

.sparkle path:nth-of-type(1) {
    --scale: 0.5;
    --delay: 0.1;
    --base: 40%;
}

.sparkle path:nth-of-type(2) {
    --scale: 1.5;
    --delay: 0.2;
    --base: 20%;
}

.sparkle path:nth-of-type(3) {
    --scale: 2.5;
    --delay: 0.35;
    --base: 30%;
}

button:before {
    content: "";
    position: absolute;
    inset: -0.25em;
    z-index: -1;
    border: 0.25em solid hsl(260 97% 50% / 0.5);
    border-radius: 100px;
    opacity: var(--active, 0);
    transition: opacity var(--transition);
}

.spark {
    position: absolute;
    inset: 0;
    border-radius: 100px;
    rotate: 0deg;
    overflow: hidden;
    mask: linear-gradient(white, transparent 50%);
    animation: flip calc(var(--spark) * 2) infinite steps(2, end);
}

@keyframes flip {
    to {
        rotate: 360deg;
    }
}

.spark:before {
    content: "";
    position: absolute;
    width: 200%;
    aspect-ratio: 1;
    top: 0%;
    left: 50%;
    z-index: -1;
    translate: -50% -15%;
    rotate: 0;
    transform: rotate(-90deg);
    opacity: calc((var(--active)) + 0.4);
    background: conic-gradient(from 0deg,
            transparent 0 340deg,
            white 360deg);
    transition: opacity var(--transition);
    animation: rotate var(--spark) linear infinite both;
}

.spark:after {
    content: "";
    position: absolute;
    inset: var(--cut);
    border-radius: 100px;
}

.backdrop {
    position: absolute;
    inset: var(--cut);
    background: var(--bg);
    border-radius: 100px;
    transition: background var(--transition);
}

@keyframes rotate {
    to {
        transform: rotate(90deg);
    }
}



@supports(selector(:has(:is(+ *)))) {
    body:has(button:is(:hover, :focus-visible)) {
        --active: 1;
        --play-state: running;
    }

    .bodydrop {
        display: none;
    }
}

button:is(:hover, :focus-visible) ~ :is(.bodydrop, .particle-pen) {
    --active: 1;
    --play-state: runnin;
}

.bodydrop {
    background: hsl(260 calc(var(--active) * 97%) 6%);
    position: fixed;
    inset: 0;
    z-index: -1
}



button:is(:hover, :focus-visible) {
    --active: 1;
    --play-state: running;
}


.sparkle-button {
    position: relative;
}

.particle-pen {
    position: absolute;
    width: 200%;
    aspect-ratio: 1;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
    -webkit-mask: radial-gradient(white, transparent 65%);
    z-index: -1;
    opacity: var(--active, 0);
    transition: opacity var(--transition);
}

.particle {
    fill: white;
    width: calc(var(--size, 0.25) * 1rem);
    aspect-ratio: 1;
    position: absolute;
    top: calc(var(--y) * 1%);
    left: calc(var(--x) * 1%);
    opacity: var(--alpha, 1);
    animation: float-out calc(var(--duration, 1) * 1s) calc(var(--delay) * -1s) infinite linear;
    transform-origin: var(--origin-x, 1000%) var(--origin-y, 1000%);
    z-index: -1;
    animation-play-state: var(--play-state, paused);
}

.particle path {
    fill: hsl(0 0% 90%);
    stroke: none;
}

.particle:nth-of-type(even) {
    animation-direction: reverse;
}

@keyframes float-out {
    to {
        rotate: 360deg;
    }
}

.text {
    translate: 2% -6%;
    letter-spacing: 0.01ch;
    background: linear-gradient(90deg, hsl(0 0% calc((var(--active) * 100%) + 65%)), hsl(0 0% calc((var(--active) * 100%) + 26%)));
    -webkit-background-clip: text;
    color: transparent;
    transition: background var(--transition);
}

button svg {
    inline-size: 1.25em;
    translate: -25% -5%;
}



:root {
    --hue: 223;
    --off-hue: 3;
    --on-hue1: 123;
    --on-hue2: 168;
    --fg: hsl(var(--hue), 10%, 90%);
    --primary: hsl(var(--hue), 90%, 50%);
    --trans-dur: 0.6s;
    --trans-timing: cubic-bezier(0.65, 0, 0.35, 1);
    font-size: calc(8px + (50 - 40) * (100vw - 320px) / (2560 - 320));
}

.switch,
.switch__input {
    -webkit-tap-highlight-color: #0000;
}


#switch {
    display: flex;
    justify-content: flex-end;
    margin: auto;
    position: relative;
    width: 5em;
    height: 3em;
}

.switch__base-outer,
.switch__base-inner {
    display: block;
    position: absolute;
}

.switch__base-outer {
    border-radius: 1.25em;
    box-shadow:
        -0.125em -0.125em 0.25em hsl(var(--hue), 10%, 30%),
        0.125em 0.125em 0.125em hsl(var(--hue), 10%, 30%) inset,
        0.125em 0.125em 0.25em hsl(0, 0%, 0%),
        -0.125em -0.125em 0.125em hsl(var(--hue), 10%, 5%) inset;
    top: 0.125em;
    left: 0.125em;
    width: 4.75em;
    height: 2.75em;
}

.switch__base-inner {
    border-radius: 1.125em;
    box-shadow:
        -0.25em -0.25em 0.25em hsl(var(--hue), 10%, 30%) inset,
        0.0625em 0.0625em 0.125em hsla(var(--hue), 10%, 30%),
        0.125em 0.25em 0.25em hsl(var(--hue), 10%, 5%) inset,
        -0.0625em -0.0625em 0.125em hsla(var(--hue), 10%, 5%);
    top: 0.375em;
    left: 0.375em;
    width: 4.25em;
    height: 2.25em;
}

.switch__base-neon {
    display: block;
    overflow: visible;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
}

.switch__base-neon path {
    stroke-dasharray: 0 104.26 0;
    transition: stroke-dasharray var(--trans-dur) var(--trans-timing);
}

.switch__input {
    outline: transparent;
    position: relative;
    width: 100%;
    height: 100%;
    -webkit-appearance: none;
    appearance: none;
}

.switch__input:before {
    border-radius: 0.125em;
    box-shadow: 0 0 0 0.125em hsla(var(--hue), 90%, 50%, 0);
    content: "";
    display: block;
    position: absolute;
    inset: -0.125em;
    transition: box-shadow 0.15s linear;
}

.switch__input:focus-visible:before {
    box-shadow: 0 0 0 0.125em var(--primary);
}

.switch__knob,
.switch__knob-container {
    border-radius: 1em;
    display: block;
    position: absolute;
}

.switch__knob {
    background-color: hsl(var(--hue), 10%, 15%);
    background-image:
        radial-gradient(88% 88% at 50% 50%, hsl(var(--hue), 10%, 20%) 47%, hsla(var(--hue), 10%, 20%, 0) 50%),
        radial-gradient(88% 88% at 47% 47%, hsl(var(--hue), 10%, 85%) 45%, hsla(var(--hue), 10%, 85%, 0) 50%),
        radial-gradient(65% 70% at 40% 60%, hsl(var(--hue), 10%, 20%) 46%, hsla(var(--hue), 10%, 20%, 0) 50%);
    box-shadow:
        -0.0625em -0.0625em 0.0625em hsl(var(--hue), 10%, 15%) inset,
        -0.125em -0.125em 0.0625em hsl(var(--hue), 10%, 5%) inset,
        0.75em 0.25em 0.125em hsla(0, 0%, 0%, 0.8);
    width: 2em;
    height: 2em;
    transition: transform var(--trans-dur) var(--trans-timing);
}

.switch__knob-container {
    overflow: hidden;
    top: 0.5em;
    left: 0.5em;
    width: 4em;
    height: 2em;
}

.switch__knob-neon {
    display: block;
    width: 2em;
    height: auto;
}

.switch__knob-neon circle {
    opacity: 0;
    stroke-dasharray: 0 90.32 0 54.19;
    transition:
        opacity var(--trans-dur) steps(1, end),
        stroke-dasharray var(--trans-dur) var(--trans-timing);
}

.switch__knob-shadow {
    border-radius: 50%;
    box-shadow: 0.125em 0.125em 0.125em hsla(0, 0%, 0%, 0.9);
    display: block;
    position: absolute;
    top: 0.5em;
    left: 0.5em;
    width: 2em;
    height: 2em;
    transition: transform var(--trans-dur) var(--trans-timing);
}

.switch__led {
    background-color: hsl(var(--off-hue), 90%, 70%);
    border-radius: 50%;
    box-shadow:
        0 -0.0625em 0.0625em hsl(var(--off-hue), 90%, 40%) inset,
        0 0 0.125em hsla(var(--off-hue), 90%, 70%, 0.3),
        0 0 0.125em hsla(var(--off-hue), 90%, 70%, 0.3),
        0.125em 0.125em 0.125em hsla(0, 0%, 0%, 0.5);
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 0.25em;
    height: 0.25em;
    transition:
        background-color var(--trans-dur) var(--trans-timing),
        box-shadow var(--trans-dur) var(--trans-timing);
}

.switch__text {
    overflow: hidden;
    position: absolute;
    width: 1px;
    height: 1px;
}

.switch__input:checked ~ .switch__led {
    background-color: hsl(var(--on-hue1), 90%, 70%);
    box-shadow:
        0 -0.0625em 0.0625em hsl(var(--on-hue1), 90%, 40%) inset,
        0 -0.125em 0.125em hsla(var(--on-hue1), 90%, 70%, 0.3),
        0 0.125em 0.125em hsla(var(--on-hue1), 90%, 70%, 0.3),
        0.125em 0.125em 0.125em hsla(0, 0%, 0%, 0.5);
}

.switch__input:checked ~ .switch__base-neon path {
    stroke-dasharray: 52.13 0 52.13;
}

.switch__input:checked ~ .switch__knob-shadow,
.switch__input:checked ~ .switch__knob-container .switch__knob {
    transform: translateX(100%);
}

.switch__input:checked ~ .switch__knob-container .switch__knob-neon circle {
    opacity: 1;
    stroke-dasharray: 45.16 0 45.16 54.19;
    transition-timing-function: steps(1, start), var(--trans-timing);
}

#setting-container {
    display: none;
    background-color: black;
    font-family: monospace;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: black;
    padding: 20px;
    border-radius: 10px;
    z-index: 15;
    
}

.box-sp {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center; /* Căn giữa ngang */
    width: 100%; /* Đảm bảo nó chiếm hết chiều rộng */
    gap: 10px;
}

#setting-container h2 {
    font-size: 24pt;
    text-align: center;
    width: 100%;
}

#setting-container p {
    font-size: 22pt;
    margin: 0;
}

.close-button-setting {
    background-image: url('./img/close.png');
    display: flex;
    top: 3%;
    right: 3%;
    position: absolute;
    height: 25px;
    width: 25px;
    border: 0px;
    border-radius: 15px;
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    background-color: transparent:
}

.close-button-setting:hover {
    box-shadow: 0 0 10px pink;
}

.open-setting-button {
    background-image: url('img/settings.svg');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    background-color: transparent;
    width: 25px;
    height: 30px;
    position: absolute;
    top: 3%;
    right: 3%;
}